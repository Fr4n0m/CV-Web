---
import Mail from "@/icons/Mail.astro";
import Phone from "@/icons/Phone.astro";
import LinkedIn from "@/icons/LinkedIn.astro";
import GitHub from "@/icons/Github.astro";
import WorldMap from "@/icons/WorldMap.astro";
import Portfolio from "@/icons/Portfolio.astro";
import type { SocialIcon } from "@/types";

import QRCode from "qrcode";
import InfoJobs from "@/icons/InfoJobs.astro";

interface Props {
  json: {
    name: string;
    label: string;
    image: string;
    location: {
      city: string;
      region: string;
    };
    profiles: {
      network: string;
      url: string;
      username: string;
    }[];
    phone: string;
    email: string;
  };
}
const { json } = Astro.props;

const { name, label, image, location, profiles, phone, email } = json;
const { city, region } = location;

async function generateQRCode(url: string) {
  try {
    return await QRCode.toDataURL(url);
  } catch (err) {
    console.error("Error generating QR code:", err);
    return null;
  }
}

const linksWithQR = await Promise.all(
  [
    { title: "Email", url: `mailto:${email}` },
    { title: "Phone", url: `tel:${phone}` },
    ...profiles.map(({ network, url }) => ({ title: network, url })),
  ].map(async (item) => ({
    ...item,
    qrCode: await generateQRCode(item.url),
  }))
);

const SOCIAL_ICONS: SocialIcon = {
  GitHub,
  LinkedIn,
  Portfolio,
};

const linkedInfo = profiles.find(({ network }) => network === "LinkedIn");
const linkedUrl = linkedInfo?.url;

const githubInfo = profiles.find(({ network }) => network === "GitHub");
const githubUrl = githubInfo?.url;

const portfolioInfo = profiles.find(({ network }) => network === "Portfolio");
const portfolioUrl = portfolioInfo?.url;

const printInfo = [email, phone, linkedUrl, githubUrl, portfolioUrl]
  .filter(Boolean)
  .join(" • ");
---

<div class="container">
  <div class="info">
    <h1>{name}</h1>
    <h2>{label}</h2>
    <span>
      <WorldMap />
      {city}, {region}
    </span>

    <footer class="no-print">
      {
        email && (
          <a
            href={`mailto:${email}`}
            title={`Enviar un correo electrónico a ${name} al correo ${email}`}
            target="_blank"
            rel="noopener noreferrer"
          >
            <Mail />
          </a>
        )
      }
      {
        phone && (
          <a
            href={`tel:${phone}`}
            title={`Llamar por teléfono a ${name} al número ${phone}`}
            target="_blank"
            rel="noopener noreferrer"
          >
            <Phone />
          </a>
        )
      }
      {
        profiles.map(({ network, url, username }) => {
          const Icon = SOCIAL_ICONS[network];

          return Icon ? (
            <a
              href={url}
              title={`Visitar el perfil de ${name} en ${network}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              <Icon />
            </a>
          ) : null;
        })
      }
    </footer>

    <footer class="print">
      {
        linksWithQR.map(({ title, qrCode }) =>
          qrCode ? (
            <div class="qr-item" title={`QR Code for ${title}`}>
              <img src={qrCode} alt={`QR code for ${title}`} />
              <span>{title}</span>
            </div>
          ) : null
        )
      }
    </footer>
  </div>
  <figure>
    <img src={image} alt={name} />
  </figure>
</div>

<style>
  .container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
  }

  .info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding-right: 32px;
  }

  h1 {
    font-size: 2rem;
  }

  h2 {
    color: #444;
    font-weight: 500;
    font-size: 1.1rem;
    text-wrap: balance;
  }

  img {
    aspect-ratio: 1 / 1;
    object-fit: cover;
    width: 128px;
    border-radius: 16px;
  }

  span {
    color: #666;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.85rem;
    letter-spacing: -0.05rem;
  }

  footer {
    color: #555;
    font-size: 0.65rem;
    display: flex;
    gap: 4px;
    margin-top: 8px;
  }

  footer a {
    color: #777;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #eee;
    padding: 4px;
    height: 32px;
    width: 32px;
    border-radius: 6px;
    transition: all 0.3s ease;
  }

  footer a:hover {
    background: #eee;
    border: 1px solid #ddd;
  }

  .qr-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  .qr-item img {
    width: 55px;
    height: 55px;
    object-fit: contain;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 4px;
  }

  .qr-item span {
    font-size: 0.75rem;
    color: #555;
    text-align: center;
  }

  @media print {
    .no-print {
      display: none !important;
    }

    .print {
      display: flex !important;
      flex-wrap: wrap;
      gap: 1rem;
    }
  }

  @media (width <= 700px) {
    .container {
      flex-direction: column-reverse;
    }

    .info {
      justify-content: center;
      align-items: center;
      padding-right: 0;
      text-align: center;
    }

    figure {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    h2 {
      text-wrap: balance;
    }

    figure {
      margin: 0 auto;
    }
  }
</style>
